#!/usr/bin/env bash
# Commits, pulls and pushes in one go.
# Useful for repos that only serve file syncing purposes.
set -eou pipefail

# global options
interactive=''
dry_run=''
use_amend=''

main() {
  while true; do
    case "${1:-}" in
      -p | --prompt | -i | --interactive)
        interactive='1'
        shift 1
        ;;
      -n | --dry-run)
        dry_run='1'
        shift 1
        ;;
      *) break ;;
    esac
  done

  commit_if_dirty
  if [[ "$use_amend" == '1' ]]; then
    push_updates '1'
  else
    pull_changes
    push_updates
  fi
}

commit_if_dirty() {
  local message=''
  local input=''
  local verbose=''

  if [[ "$(git status -s | wc -l | xargs)" == "0" ]]; then return; fi
  message="$(get_default_message || echo 'Update')"

  if [[ "$interactive" == '1' ]]; then
    echo "Changes in $(pwd):"
    echo ''
    git status -s
    echo ''

    while true; do
      echo -ne "\033[2K\r"
      if [[ "$verbose" == "" ]]; then
        echo -n '[Enter] sync now · [?] more options: '
      else
        echo -e 'Options:'
        echo '  [enter] sync now'
        echo '  [m] change message'
        echo '  [a] amend'
        echo '  [d] show diff'
        echo '  [q] quit'
        echo -n '> '
      fi
      read -n1 input

      case "$input" in
        d)
          verbose='1'
          clear
          git diff HEAD
          echo '' ;;
        q)
          exit 1 ;;
        a)
          use_amend='1'
          break ;;
        '?')
          verbose='1' ;;
        m)
          echo ''
          echo ''
          echo 'Enter commit message: '
          echo -n '> '
          read -r message
          echo '' ;;
        'c' | '')
          break ;;
        *) ;;
      esac
    done
    echo ""
  fi

  _git add --all .
  if [[ "$use_amend" == '1' ]]; then
    _git commit --amend -C HEAD
  else
    _git commit -m "$message"
  fi
}

get_default_message() {
  local message=''
  local count=''
  message="$(git status -s | head -n 1 | xargs)"
  count="$(git status -s | wc -l | xargs)"

  if [[ -z "$message" ]]; then return 1; fi

  # append count
  if [[ "$count" != '1' ]]; then
    message="$message (+$((count - 1)))"
  fi

  echo "$message"
}

pull_changes() {
  # Pull changes
  echo '[›››     ] Pulling...'
  if ! _git pull --quiet --rebase --autostash; then
    echo 'Error: Failed to pull changes.'
    _git rebase --abort
    exit 1
  fi
}

push_updates() {
  # Push if there are any changes
  local message=''
  local force="${1:-}"

  if [[ "$dry_run" == '1' ]] || git status --branch -s | head -n 1 | grep -q ahead; then
    echo -e "\033[F\033[2K\r[››››››  ] Pushing..."
    if [[ "$force" == '1' ]]; then
      _git push --quiet --no-progress --force-with-lease
      message="$(git log -1 --pretty='format:%s')"
      echo -e "\033[F\033[2K\r✓ Pushed (amend): ‘${message}’"
    else
      _git push --quiet --no-progress
      message="$(git log -1 --pretty='format:%s')"
      echo -e "\033[F\033[2K\r✓ Pushed: ‘${message}’"
    fi
  else
    echo -e "\033[F\033[2K\r✓ No changes"
  fi
}

_git() {
  if [[ "$dry_run" == '1' ]]; then
    echo -e "\033[32m$ git $*\033[0m"
  else
    git "$@" >/dev/null
  fi
  # asrt
}

main "$@"
