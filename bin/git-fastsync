#!/usr/bin/env bash
# Commits, pulls and pushes in one go.
# Useful for repos that only serve file syncing purposes.
set -eou pipefail

# global options
interactive=''
dry_run=''

main() {
  while true; do
    case "${1:-}" in
      -p | --prompt | -i | --interactive)
        interactive='1'
        shift 1
        ;;
      -n | --dry-run)
        dry_run='1'
        shift 1
        ;;
      *) break ;;
    esac
  done

  commit_if_dirty
  pull_changes
  push_updates
}

commit_if_dirty() {
  local message=''
  local input=''

  if [[ "$(git status -s | wc -l | xargs)" == "0" ]]; then return; fi
  _git add --all .
  message="$(get_default_message || echo 'Update')"

  if [[ "$interactive" == '1' ]]; then
    while true; do
      git diff --compact-summary --cached
      echo ''
      echo 'Commit message:'
      echo "  $message"
      echo ''
      echo -n '[Enter]accept, [d]iff, [q]uit: '
      read -r input

      case "$input" in
        d) git diff --cached ;;
        q) exit 1 ;;
        '') break ;;
        *) message="$input"; break ;;
      esac
    done
    echo ""
  else
    git diff --compact-summary --cached
    echo ""
  fi

  _git commit -m "$message"

  echo ""
}

get_default_message() {
  local message=''
  local count=''
  message="$(git status -s | head -n 1 | xargs)"
  count="$(git status -s | wc -l | xargs)"

  if [[ -z "$message" ]]; then return 1; fi

  # append count
  if [[ "$count" != '1' ]]; then
    message="$message (+$((count - 1)))"
  fi

  echo "$message"
}

pull_changes() {
  # Pull changes
  echo -n '--> pull... '
  if ! _git pull --rebase; then
    echo ''
    echo 'Error: Failed to pull changes.'
    _git rebase --abort
    exit 1
  fi
}

push_updates() {
  # Push if there are any changes
  if git status --branch -s | head -n 1 | grep -q ahead; then
    echo -n "push... "
    _git push --quiet
    echo "updated ✓"
  else
    echo "no changes ✓"
  fi
}

_git() {
  if [[ "$dry_run" == '1' ]]; then
    echo ">> git $*"
  else
    git "$@" >/dev/null
  fi
}

main "$@"
