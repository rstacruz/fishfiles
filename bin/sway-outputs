#!/usr/bin/env bash
# Simple swaywm output management tool.
#
#   sway-outputs s [single]
#   sway-outputs x [swap]
#   sway-outputs m [multi]
#
set -eou pipefail

hl="\033[31m"
h1="\033[4m"
clear="\033[0m"
raw_outputs=""

ok() {
  echo -e "\033[34m✓\033[0m  $@"
}

info() {
  echo -e "\033[34m○\033[0m  $@"
}

notify() {
  notify-send "Sway" "$*"
}

check_dependencies() {
  if ! command -v swaymsg &>/dev/null; then
    echo "No sway found"
    exit 1
  fi

  if ! command -v jq &>/dev/null; then
    echo "No jq found"
    exit 1
  fi
}

# Get outputs from SwayWM via `swaymsg -t get_outputs`, but cache the result.
get_raw_outputs() {
  if [[ -z "$raw_outputs" ]]; then
    raw_outputs="$(swaymsg -t get_outputs)"
  fi
  echo "$raw_outputs"
}

# Resets cache so that the next get_raw_outputs() will force a refresh.
reset_output_cache() {
  raw_outputs=""
}

# Get outputs with lots of metadata.
get_outputs() {
  get_raw_outputs \
    | jq -r '.[] | [.name, .active, .rect.x, .rect.y, .rect.width, .rect.height, .focused, .make, .model] | @sh'
}

get_output_count() {
  get_raw_outputs \
    | jq -r '.[] | .name' | wc -l
}

get_unfocused_outputs() {
  get_raw_outputs | jq -r '.[] | select(.focused != true and .active == true) | .name'
}

get_first_inactive_output() {
  get_raw_outputs | jq -r '.[] | select(.focused != true) | .name' | head -n 1 | xargs
}

get_active_outputs() {
  get_raw_outputs | jq -r '.[] | select(.active == true) | .name'
}

get_inactive_outputs() {
  get_raw_outputs | jq -r '.[] | select(.active != true) | .name'
}

get_focused_output() {
  get_raw_outputs | jq -r '.[] | select(.focused == true) | .name'
}

_msg() {
  if [[ -n "${DEBUG:-}" ]]; then
    echo -e "\033[37m$ swaymsg $@\033[0m\n"
  fi
  swaymsg "$@"
}

list_outputs() {
  local outputs count output m name active x y width height focused make model
  reset_output_cache
  outputs="$(get_outputs)"
  count="$(get_active_outputs | wc -l)"

  echo ""
  case "$count" in
    1) echo -e "${h1}Single-display mode${clear}" ;;
    *) echo -e "${h1}Multi-display mode${clear}" ;;
  esac

  echo "$outputs" | while read output; do
    eval "m=($output)"
    name="${m[0]}"
    active="${m[1]}"
    x="${m[2]}"
    y="${m[3]}"
    width="${m[4]}"
    height="${m[5]}"
    focused="${m[6]}"
    make="${m[7]}"
    model="${m[8]}"
    if [[ "$active" == "true" ]]; then
      label_primary="$(if [ "${x}x${y}" == "0x0" ]; then echo 'primary '; else echo ' '; fi)"
      label_focus="$(if [ "$focused" == "true" ]; then echo '→'; else echo ' '; fi)"
      printf "  %-1s \033[1m%-15s\033[0m %-10s \033[32m%s\033[0m\n" "$label_focus" "$name" "${width}x${height}" "${label_primary}"
    else
      printf "  %-1s \033[1m%-15s\033[0m %-10s \033[31m%s\033[0m\n" "" "$name" "-" "(off)"
    fi
  done
}

help() {
  local bin
  bin="$(basename "$0")"
  echo -e ""
  echo -e "Usage:"
  echo -e "  $bin ${hl}[<command>]${clear}"
  echo -e ""
  echo -e "Commands:"
  echo -e "  ${hl}list     ${clear}list displays"
  echo -e "  ${hl}single   ${clear}turn off other displays [alias: s]"
  echo -e "  ${hl}swap     ${clear}switch to the other display [alias: x]"
  echo -e "  ${hl}multi    ${clear}turn on all displays [alias: m]"
  echo -e ""
  echo -e "Running '$bin' without arguments will list outputs."
  echo -e ""
}

mini_usage() {
  local bin actives inactives inactives_list
  bin="$(basename "$0")"
  actives="$(get_active_outputs | wc -l)"
  inactives="$(get_inactive_outputs | wc -l)"
  inactives_list="$(get_inactive_outputs | xargs)"

  echo ""
  echo -e "${h1}Tips${clear}"

  if (( "$inactives" > 0 )); then
    echo -e "  ${hl}$bin swap${clear}   - use ${hl}$(get_first_inactive_output)${clear} only (other)."
    echo -e "  ${hl}$bin multi${clear}  - go multi-display mode."
  fi
  if (( "$actives" > 1 )); then
    echo -e "  ${hl}$bin single${clear} - use ${hl}$(get_focused_output)${clear} only (this)."
    echo -e "  ${hl}$bin swap${clear}   - use ${hl}$(get_first_inactive_output)${clear} only (other)."
  fi

  echo -e "  ${hl}$bin help${clear}   - for more."
}

single_mode() {
  use_single_display "$(get_focused_output)"
}

swap_mode() {
  local output
  output="$(get_first_inactive_output)"

  if [[ -z "$output" ]]; then
    info "There's no other display to swap to."
  else
    use_single_display "$output"
  fi
}

use_single_display() {
  local primary others commands
  primary="$1"
  others="$(get_raw_outputs | jq '.[] | select(.name != "'"$primary"'") | .name' | xargs)"

  if [[ -z "$others" ]]; then
    info "Already using ${hl}$primary${clear} as a single display."
    notify "Already using $primary as a single display."
    return
  fi

  ok "Using ${hl}$primary${clear} as a single display."
  notify "Switching to ${primary}."

  commands=()
  _msg output $primary enable
  for output in "$others"; do
    _msg output $output disable
  done
}

multi_mode() {
  local list output
  list="$(get_inactive_outputs | xargs)"

  if [[ "$(get_output_count)" == 1 ]]; then
    info "Only one display is available."
    notify "Only one display is available."
  elif [[ -z "$list" ]]; then
    info "Multi-display mode already enabled."
    notify "Multi-display mode already enabled."
    return
  else
    ok "Multi-display mode: enabling ${hl}$list${clear}."
    notify "Multi-display mode: enabling $list."
  fi

  for output in "$list"; do
    _msg output "$output" enable
  done
}

main() {
  case "${1:-}" in
    h | help | -h | --help)
      help
      ;;
    s | si | sin | sing | singl | single | so | sol | solo)
      check_dependencies
      single_mode
      list_outputs
      mini_usage
      ;;
    m | mu | mul | mult | multi)
      check_dependencies
      multi_mode
      list_outputs
      mini_usage
      ;;
    x | sw | swa | swap)
      check_dependencies
      swap_mode
      list_outputs
      mini_usage
      ;;
    l | li | lis | list | "")
      check_dependencies
      list_outputs
      mini_usage
      ;;
    *)
      help
      ;;
  esac
}

main "$@"
